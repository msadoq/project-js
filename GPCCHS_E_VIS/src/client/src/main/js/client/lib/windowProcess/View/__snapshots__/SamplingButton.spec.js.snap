// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`windowProcess SamplingButton :: render A 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          }
    }
>
    <SamplingButton
        sampling={
            Object {
                "samplingLock": "off",
                "samplingStatus": "off",
                "zoomState": "out",
              }
        }
        toggleSamplingStatus={[Function]}
        viewId="abcdef-123456"
    />
</Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "sampling": Object {
        "samplingLock": "off",
        "samplingStatus": "off",
        "zoomState": "out",
      },
      "toggleSamplingStatus": [Function],
      "viewId": "abcdef-123456",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "sampling": Object {
          "samplingLock": "off",
          "samplingStatus": "off",
          "zoomState": "out",
        },
        "toggleSamplingStatus": [Function],
        "viewId": "abcdef-123456",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`windowProcess SamplingButton :: render B 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          }
    }
>
    <SamplingButton
        sampling={
            Object {
                "samplingLock": "off",
                "samplingStatus": "on",
                "zoomState": "out",
              }
        }
        toggleSamplingStatus={[Function]}
        viewId="abcdef-123456"
    />
</Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "sampling": Object {
        "samplingLock": "off",
        "samplingStatus": "on",
        "zoomState": "out",
      },
      "toggleSamplingStatus": [Function],
      "viewId": "abcdef-123456",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "sampling": Object {
          "samplingLock": "off",
          "samplingStatus": "on",
          "zoomState": "out",
        },
        "toggleSamplingStatus": [Function],
        "viewId": "abcdef-123456",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`windowProcess SamplingButton :: render C 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          }
    }
>
    <SamplingButton
        sampling={
            Object {
                "samplingLock": "on",
                "samplingStatus": "off",
                "zoomState": "out",
              }
        }
        toggleSamplingStatus={[Function]}
        viewId="abcdef-123456"
    />
</Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "sampling": Object {
        "samplingLock": "on",
        "samplingStatus": "off",
        "zoomState": "out",
      },
      "toggleSamplingStatus": [Function],
      "viewId": "abcdef-123456",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "sampling": Object {
          "samplingLock": "on",
          "samplingStatus": "off",
          "zoomState": "out",
        },
        "toggleSamplingStatus": [Function],
        "viewId": "abcdef-123456",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`windowProcess SamplingButton :: render D 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    store={
        Object {
            "dispatch": [Function],
            "getState": [Function],
            "replaceReducer": [Function],
            "subscribe": [Function],
            Symbol(Symbol.observable): [Function],
          }
    }
>
    <SamplingButton
        sampling={
            Object {
                "samplingLock": "on",
                "samplingStatus": "on",
                "zoomState": "out",
              }
        }
        toggleSamplingStatus={[Function]}
        viewId="abcdef-123456"
    />
</Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "sampling": Object {
        "samplingLock": "on",
        "samplingStatus": "on",
        "zoomState": "out",
      },
      "toggleSamplingStatus": [Function],
      "viewId": "abcdef-123456",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "sampling": Object {
          "samplingLock": "on",
          "samplingStatus": "on",
          "zoomState": "out",
        },
        "toggleSamplingStatus": [Function],
        "viewId": "abcdef-123456",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
