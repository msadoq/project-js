# Produced by Velocity Python Generator 2.0.0-R10

# -*- coding: utf-8 -*-

"""!
Project   : ISIS
Component : GPCC
@file     : ihmLauncherConfig.py
@author   : isis
@date     : 
@brief    :
@type     : Class

"""

# ====================================================================
# Start of user code HistoryZone
# HISTORY
# 
# VERSION : 1.1.2 : FA : #7472 : 01/09/2017 : Update javascript VIMA launcher to used iedit and
# manage the features it launch, remove the old launcher
# END-HISTORY
# End of user code HistoryZone
# ====================================================================

"""
**********************************************************************
 Module IhmLauncherConfig
**********************************************************************

Contain class IhmLauncherConfig
"""

from GPCC.xmlRuntime.core.xmlcomplexobject import XMLComplexObject
import GPCC.xmlRuntime.exceptions.xmlexceptions as xmlexceptions 
from GPCC.xmlRuntime.types.xmlType import XmlType

from GPCC.xmlRuntime.types.XMLString import XMLString    
from GPCC.xmlRuntime.types.XMLBool import XMLBool    


class IhmLauncherConfig(XMLComplexObject):
    """
    ======================================================================
    Class IhmLauncherConfig
    ======================================================================

    Class generated by xmlGenerator

    .. sealso : XMLComplexObject
    """


    def __init__(self):
        """
        Constructor for IhmLauncherConfig
        """
        super().__init__(**{"debug":
                            (self.createxmldebug, 
                             self.setxmldebug,
                             self.setFileLinexmldebug ),
                            "fmdRoot":
                            (self.createxmlfmdRoot, 
                             self.setxmlfmdRoot,
                             self.setFileLinexmlfmdRoot ),
                            "nodePath":
                            (self.createxmlnodePath, 
                             self.setxmlnodePath,
                             self.setFileLinexmlnodePath ),
                            "dcPushUri":
                            (self.createxmldcPushUri, 
                             self.setxmldcPushUri,
                             self.setFileLinexmldcPushUri ),
                            "dcPullUri":
                            (self.createxmldcPullUri, 
                             self.setxmldcPullUri,
                             self.setFileLinexmldcPullUri ),
                            "mcPushUri":
                            (self.createxmlmcPushUri, 
                             self.setxmlmcPushUri,
                             self.setFileLinexmlmcPushUri ),
                            "mcPullUri":
                            (self.createxmlmcPullUri, 
                             self.setxmlmcPullUri,
                             self.setFileLinexmlmcPullUri ),
                            "featuresConfFile":
                            (self.createxmlfeaturesConfFile, 
                             self.setxmlfeaturesConfFile,
                             self.setFileLinexmlfeaturesConfFile ),
                            "additionalArg" : 
                            (self.createxmladditionalArg, 
                             self.setxmladditionalArg)})

        self.__xmldebug = None
        self.__xmlfmdRoot = None
        self.__xmlnodePath = None
        self.__xmldcPushUri = None
        self.__xmldcPullUri = None
        self.__xmlmcPushUri = None
        self.__xmlmcPullUri = None
        self.__xmlfeaturesConfFile = None
        self.__xmladditionalArg = None
        self.__shouldWriteTag = True


    @property
    def xmldebug(self):
        """
        Getter
        @return __xmldebug
        """
        return self.__xmldebug
            
    @xmldebug.setter
    def xmldebug(self, value):
        """
        Setter
        @param value The value to set __xmldebug with
        """
        self.__xmldebug = value
    
    @xmldebug.deleter
    def xmldebug(self):
        """
        Deleter
        delete __xmldebug
        """
        del self.__xmldebug
    @property
    def xmlfmdRoot(self):
        """
        Getter
        @return __xmlfmdRoot
        """
        return self.__xmlfmdRoot
            
    @xmlfmdRoot.setter
    def xmlfmdRoot(self, value):
        """
        Setter
        @param value The value to set __xmlfmdRoot with
        """
        self.__xmlfmdRoot = value
    
    @xmlfmdRoot.deleter
    def xmlfmdRoot(self):
        """
        Deleter
        delete __xmlfmdRoot
        """
        del self.__xmlfmdRoot
    @property
    def xmlnodePath(self):
        """
        Getter
        @return __xmlnodePath
        """
        return self.__xmlnodePath
            
    @xmlnodePath.setter
    def xmlnodePath(self, value):
        """
        Setter
        @param value The value to set __xmlnodePath with
        """
        self.__xmlnodePath = value
    
    @xmlnodePath.deleter
    def xmlnodePath(self):
        """
        Deleter
        delete __xmlnodePath
        """
        del self.__xmlnodePath
    @property
    def xmldcPushUri(self):
        """
        Getter
        @return __xmldcPushUri
        """
        return self.__xmldcPushUri
            
    @xmldcPushUri.setter
    def xmldcPushUri(self, value):
        """
        Setter
        @param value The value to set __xmldcPushUri with
        """
        self.__xmldcPushUri = value
    
    @xmldcPushUri.deleter
    def xmldcPushUri(self):
        """
        Deleter
        delete __xmldcPushUri
        """
        del self.__xmldcPushUri
    @property
    def xmldcPullUri(self):
        """
        Getter
        @return __xmldcPullUri
        """
        return self.__xmldcPullUri
            
    @xmldcPullUri.setter
    def xmldcPullUri(self, value):
        """
        Setter
        @param value The value to set __xmldcPullUri with
        """
        self.__xmldcPullUri = value
    
    @xmldcPullUri.deleter
    def xmldcPullUri(self):
        """
        Deleter
        delete __xmldcPullUri
        """
        del self.__xmldcPullUri
    @property
    def xmlmcPushUri(self):
        """
        Getter
        @return __xmlmcPushUri
        """
        return self.__xmlmcPushUri
            
    @xmlmcPushUri.setter
    def xmlmcPushUri(self, value):
        """
        Setter
        @param value The value to set __xmlmcPushUri with
        """
        self.__xmlmcPushUri = value
    
    @xmlmcPushUri.deleter
    def xmlmcPushUri(self):
        """
        Deleter
        delete __xmlmcPushUri
        """
        del self.__xmlmcPushUri
    @property
    def xmlmcPullUri(self):
        """
        Getter
        @return __xmlmcPullUri
        """
        return self.__xmlmcPullUri
            
    @xmlmcPullUri.setter
    def xmlmcPullUri(self, value):
        """
        Setter
        @param value The value to set __xmlmcPullUri with
        """
        self.__xmlmcPullUri = value
    
    @xmlmcPullUri.deleter
    def xmlmcPullUri(self):
        """
        Deleter
        delete __xmlmcPullUri
        """
        del self.__xmlmcPullUri
    @property
    def xmlfeaturesConfFile(self):
        """
        Getter
        @return __xmlfeaturesConfFile
        """
        return self.__xmlfeaturesConfFile
            
    @xmlfeaturesConfFile.setter
    def xmlfeaturesConfFile(self, value):
        """
        Setter
        @param value The value to set __xmlfeaturesConfFile with
        """
        self.__xmlfeaturesConfFile = value
    
    @xmlfeaturesConfFile.deleter
    def xmlfeaturesConfFile(self):
        """
        Deleter
        delete __xmlfeaturesConfFile
        """
        del self.__xmlfeaturesConfFile
    @property
    def xmladditionalArg(self):
        """
        Getter
        @return __xmladditionalArg
        """
        return self.__xmladditionalArg
            
    @xmladditionalArg.setter
    def xmladditionalArg(self, value):
        """
        Setter
        @param value The value to set __xmladditionalArg with
        """
        self.__xmladditionalArg = value
    
    @xmladditionalArg.deleter
    def xmladditionalArg(self):
        """
        Deleter
        delete __xmladditionalArg
        """
        del self.__xmladditionalArg

    @property
    def shouldWriteTag(self):
        """
        Getter
        @return __shouldWriteTag
        """
        return self.__shouldWriteTag
        
    @shouldWriteTag.setter
    def shouldWriteTag(self, value):
        """
        Setter
        @param value The value to set __shouldWriteTag with
        """
        self.__shouldWriteTag = value
    
    @shouldWriteTag.deleter
    def shouldWriteTag(self):
        """
        Deleter
        delete __shouldWriteTag
        """
        del self.__shouldWriteTag




    def createxmldebug(self):    
        """
        Lambda for variable creation

        @return a xmlRuntime.types.XMLBool
        @see GPCC.xmlRuntime.core.xmlobject
        """

        self.__xmldebug = XMLBool()
        self.__xmldebug.tag_name = "debug"
        return self.__xmldebug

    def setxmldebug(self, value):    
        """
        Set the variable
        @param value the value to store.
        """
        self.__xmldebug = XMLBool(value=value)


    def setFileLinexmldebug(self, fileName, line):    
        """
        Set the file name and line
        @param fileName The file name.
        @param line The line.
        """
        self.__xmldebug.fileName = fileName
        self.__xmldebug.lineInFile = line


    def createxmlfmdRoot(self):    
        """
        Lambda for variable creation

        @return a xmlRuntime.types.XMLString
        @see GPCC.xmlRuntime.core.xmlobject
        """

        self.__xmlfmdRoot = XMLString()
        self.__xmlfmdRoot.tag_name = "fmdRoot"
        return self.__xmlfmdRoot

    def setxmlfmdRoot(self, value):    
        """
        Set the variable
        @param value the value to store.
        """
        self.__xmlfmdRoot = XMLString(value=value)


    def setFileLinexmlfmdRoot(self, fileName, line):    
        """
        Set the file name and line
        @param fileName The file name.
        @param line The line.
        """
        self.__xmlfmdRoot.fileName = fileName
        self.__xmlfmdRoot.lineInFile = line


    def createxmlnodePath(self):    
        """
        Lambda for variable creation

        @return a xmlRuntime.types.XMLString
        @see GPCC.xmlRuntime.core.xmlobject
        """

        self.__xmlnodePath = XMLString()
        self.__xmlnodePath.tag_name = "nodePath"
        return self.__xmlnodePath

    def setxmlnodePath(self, value):    
        """
        Set the variable
        @param value the value to store.
        """
        self.__xmlnodePath = XMLString(value=value)


    def setFileLinexmlnodePath(self, fileName, line):    
        """
        Set the file name and line
        @param fileName The file name.
        @param line The line.
        """
        self.__xmlnodePath.fileName = fileName
        self.__xmlnodePath.lineInFile = line


    def createxmldcPushUri(self):    
        """
        Lambda for variable creation

        @return a xmlRuntime.types.XMLString
        @see GPCC.xmlRuntime.core.xmlobject
        """

        self.__xmldcPushUri = XMLString()
        self.__xmldcPushUri.tag_name = "dcPushUri"
        return self.__xmldcPushUri

    def setxmldcPushUri(self, value):    
        """
        Set the variable
        @param value the value to store.
        """
        self.__xmldcPushUri = XMLString(value=value)


    def setFileLinexmldcPushUri(self, fileName, line):    
        """
        Set the file name and line
        @param fileName The file name.
        @param line The line.
        """
        self.__xmldcPushUri.fileName = fileName
        self.__xmldcPushUri.lineInFile = line


    def createxmldcPullUri(self):    
        """
        Lambda for variable creation

        @return a xmlRuntime.types.XMLString
        @see GPCC.xmlRuntime.core.xmlobject
        """

        self.__xmldcPullUri = XMLString()
        self.__xmldcPullUri.tag_name = "dcPullUri"
        return self.__xmldcPullUri

    def setxmldcPullUri(self, value):    
        """
        Set the variable
        @param value the value to store.
        """
        self.__xmldcPullUri = XMLString(value=value)


    def setFileLinexmldcPullUri(self, fileName, line):    
        """
        Set the file name and line
        @param fileName The file name.
        @param line The line.
        """
        self.__xmldcPullUri.fileName = fileName
        self.__xmldcPullUri.lineInFile = line


    def createxmlmcPushUri(self):    
        """
        Lambda for variable creation

        @return a xmlRuntime.types.XMLString
        @see GPCC.xmlRuntime.core.xmlobject
        """

        self.__xmlmcPushUri = XMLString()
        self.__xmlmcPushUri.tag_name = "mcPushUri"
        return self.__xmlmcPushUri

    def setxmlmcPushUri(self, value):    
        """
        Set the variable
        @param value the value to store.
        """
        self.__xmlmcPushUri = XMLString(value=value)


    def setFileLinexmlmcPushUri(self, fileName, line):    
        """
        Set the file name and line
        @param fileName The file name.
        @param line The line.
        """
        self.__xmlmcPushUri.fileName = fileName
        self.__xmlmcPushUri.lineInFile = line


    def createxmlmcPullUri(self):    
        """
        Lambda for variable creation

        @return a xmlRuntime.types.XMLString
        @see GPCC.xmlRuntime.core.xmlobject
        """

        self.__xmlmcPullUri = XMLString()
        self.__xmlmcPullUri.tag_name = "mcPullUri"
        return self.__xmlmcPullUri

    def setxmlmcPullUri(self, value):    
        """
        Set the variable
        @param value the value to store.
        """
        self.__xmlmcPullUri = XMLString(value=value)


    def setFileLinexmlmcPullUri(self, fileName, line):    
        """
        Set the file name and line
        @param fileName The file name.
        @param line The line.
        """
        self.__xmlmcPullUri.fileName = fileName
        self.__xmlmcPullUri.lineInFile = line


    def createxmlfeaturesConfFile(self):    
        """
        Lambda for variable creation

        @return a xmlRuntime.types.XMLString
        @see GPCC.xmlRuntime.core.xmlobject
        """

        self.__xmlfeaturesConfFile = XMLString()
        self.__xmlfeaturesConfFile.tag_name = "featuresConfFile"
        return self.__xmlfeaturesConfFile

    def setxmlfeaturesConfFile(self, value):    
        """
        Set the variable
        @param value the value to store.
        """
        self.__xmlfeaturesConfFile = XMLString(value=value)


    def setFileLinexmlfeaturesConfFile(self, fileName, line):    
        """
        Set the file name and line
        @param fileName The file name.
        @param line The line.
        """
        self.__xmlfeaturesConfFile.fileName = fileName
        self.__xmlfeaturesConfFile.lineInFile = line


    def createxmladditionalArg(self):    
        """
        Lambda for variable creation

        @return a xmlRuntime.types.XMLString list        
        @see GPCC.xmlRuntime.core.xmlobject
        """
        if self.__xmladditionalArg is None:
            self.__xmladditionalArg = []
        item = XMLString()
        item.tag_name = "additionalArg"
        return item

    def setxmladditionalArg(self, value):    
        """
        Set the variable
        @param value the value to store.
        """
        if self.__xmladditionalArg is None:
            self.__xmladditionalArg = []
            
        for val in value.split() :
            item = XMLString(value=val)
            self.__xmladditionalArg.append(item)




    def writeXml(self,file,idtLvl):
        """
        Method writeXml
        ------------------------------------------------------------

        Write this object in the file

        @param file _io.TextIOWrapper. The file handler to write in
        @param idtLvl int. The level of indentation
        """
        attributes = {}
        objectsList=((None, None, None),
                     (XmlType.SIMPLE_OBJECT, self.__xmldebug, "debug"),
                     (XmlType.SIMPLE_OBJECT, self.__xmlfmdRoot, "fmdRoot"),
                     (XmlType.SIMPLE_OBJECT, self.__xmlnodePath, "nodePath"),
                     (XmlType.SIMPLE_OBJECT, self.__xmldcPushUri, "dcPushUri"),
                     (XmlType.SIMPLE_OBJECT, self.__xmldcPullUri, "dcPullUri"),
                     (XmlType.SIMPLE_OBJECT, self.__xmlmcPushUri, "mcPushUri"),
                     (XmlType.SIMPLE_OBJECT, self.__xmlmcPullUri, "mcPullUri"),
                     (XmlType.SIMPLE_OBJECT, self.__xmlfeaturesConfFile, "featuresConfFile"),
                     (XmlType.SIMPLE_LIST_OBJECT, self.__xmladditionalArg, "additionalArg"),
                    )
        indentEndTagIhmLauncherConfig = False
        
        if self.tag_name is None:# BAR False alarm pylint: disable=E0203
            self.tag_name = "IhmLauncherConfig" # BAR False alarm pylint: disable=W0201
        #Write start tag
        if self.__shouldWriteTag :
            self.writeIndent(file,idtLvl)
            self.writeStartTag(file, self.tag_name,**attributes)
            idtLvl += 1
        # Write objects
        for objType, obj, name in objectsList :
            # Write XmlSimpleObject
            if objType == XmlType.SIMPLE_OBJECT :

                if obj is None:
                    continue
                if name == "content":
                    self.writeAndFormatXml(file, str(obj.getStringValue()))
                else:
                    indentEndTagIhmLauncherConfig = True
                    self.writeNewLine(file)
                    self.writeIndent(file,idtLvl)
                    self.writeStartTag(file,name)
                    self.writeAndFormatXml(file, str(obj.getStringValue()))
                    self.writeEndTag(file,name)

            # Write XmlSimpleObject list
            if objType == XmlType.SIMPLE_LIST_OBJECT :
                #Write simple lists
                if obj is None:
                    continue
                for sobj in obj[:-1] :            
                    if name == "values" :                    
                        self.writeAndFormatXml(file, str(sobj.getStringValue()+" "))
                    else :
                        indentEndTagIhmLauncherConfig = True
                        self.writeNewLine(file)
                        self.writeIndent(file,idtLvl)
                        self.writeStartTag(file,name)
                        self.writeAndFormatXml(file, str(sobj.getStringValue()))
                        self.writeEndTag(file,name)
                sobj=obj[-1]
                if name == "values" :                
                    self.writeAndFormatXml(file, str(sobj.getStringValue()))
                else :
                    indentEndTagIhmLauncherConfig = True
                    self.writeNewLine(file)
                    self.writeIndent(file,idtLvl)
                    self.writeStartTag(file,name)
                    self.writeAndFormatXml(file, str(sobj.getStringValue()))
                    self.writeEndTag(file,name)
   
        #Write end tag
        if self.__shouldWriteTag :
            idtLvl -= 1
            if indentEndTagIhmLauncherConfig :
                self.writeNewLine(file)
                self.writeIndent(file,idtLvl)
            self.writeEndTag(file,self.tag_name)



    def validate(self):# CBN DV6 TBC_CNES Number of branch depends on the xsd pylint: disable=too-many-branches
        """
        Validate this instance
        @return A list containing all the errors found
        """
        error = []

        if self.__xmldebug is None:
            exception = xmlexceptions.XMLRequiredObject('IhmLauncherConfig', 'debug')
            if self.fileName is not None:
                exception.setFileAndLine(self.fileName, self.lineInFile)
            error.append(exception)
        if self.__xmldebug is not None:
            valid, constraints = self.__xmldebug.validate()
            if not valid:
                exception = xmlexceptions.XMLInvalidSimpleObjectException('IhmLauncherConfig',
                                                                          'debug',
                                                                          'XMLBool',
                                                                          self.__xmldebug.getValue(),
                                                                          constraints)
                if self.fileName is not None:
                    exception.setFileAndLine(self.fileName, self.__xmldebug.lineInFile)
                error.append(exception)
                

        if self.__xmlfmdRoot is None:
            exception = xmlexceptions.XMLRequiredObject('IhmLauncherConfig', 'fmdRoot')
            if self.fileName is not None:
                exception.setFileAndLine(self.fileName, self.lineInFile)
            error.append(exception)
        if self.__xmlfmdRoot is not None:
            valid, constraints = self.__xmlfmdRoot.validate()
            if not valid:
                exception = xmlexceptions.XMLInvalidSimpleObjectException('IhmLauncherConfig',
                                                                          'fmdRoot',
                                                                          'XMLString',
                                                                          self.__xmlfmdRoot.getValue(),
                                                                          constraints)
                if self.fileName is not None:
                    exception.setFileAndLine(self.fileName, self.__xmlfmdRoot.lineInFile)
                error.append(exception)
                

        if self.__xmlnodePath is None:
            exception = xmlexceptions.XMLRequiredObject('IhmLauncherConfig', 'nodePath')
            if self.fileName is not None:
                exception.setFileAndLine(self.fileName, self.lineInFile)
            error.append(exception)
        if self.__xmlnodePath is not None:
            valid, constraints = self.__xmlnodePath.validate()
            if not valid:
                exception = xmlexceptions.XMLInvalidSimpleObjectException('IhmLauncherConfig',
                                                                          'nodePath',
                                                                          'XMLString',
                                                                          self.__xmlnodePath.getValue(),
                                                                          constraints)
                if self.fileName is not None:
                    exception.setFileAndLine(self.fileName, self.__xmlnodePath.lineInFile)
                error.append(exception)
                

        if self.__xmldcPushUri is None:
            exception = xmlexceptions.XMLRequiredObject('IhmLauncherConfig', 'dcPushUri')
            if self.fileName is not None:
                exception.setFileAndLine(self.fileName, self.lineInFile)
            error.append(exception)
        if self.__xmldcPushUri is not None:
            valid, constraints = self.__xmldcPushUri.validate()
            if not valid:
                exception = xmlexceptions.XMLInvalidSimpleObjectException('IhmLauncherConfig',
                                                                          'dcPushUri',
                                                                          'XMLString',
                                                                          self.__xmldcPushUri.getValue(),
                                                                          constraints)
                if self.fileName is not None:
                    exception.setFileAndLine(self.fileName, self.__xmldcPushUri.lineInFile)
                error.append(exception)
                

        if self.__xmldcPullUri is None:
            exception = xmlexceptions.XMLRequiredObject('IhmLauncherConfig', 'dcPullUri')
            if self.fileName is not None:
                exception.setFileAndLine(self.fileName, self.lineInFile)
            error.append(exception)
        if self.__xmldcPullUri is not None:
            valid, constraints = self.__xmldcPullUri.validate()
            if not valid:
                exception = xmlexceptions.XMLInvalidSimpleObjectException('IhmLauncherConfig',
                                                                          'dcPullUri',
                                                                          'XMLString',
                                                                          self.__xmldcPullUri.getValue(),
                                                                          constraints)
                if self.fileName is not None:
                    exception.setFileAndLine(self.fileName, self.__xmldcPullUri.lineInFile)
                error.append(exception)
                

        if self.__xmlmcPushUri is None:
            exception = xmlexceptions.XMLRequiredObject('IhmLauncherConfig', 'mcPushUri')
            if self.fileName is not None:
                exception.setFileAndLine(self.fileName, self.lineInFile)
            error.append(exception)
        if self.__xmlmcPushUri is not None:
            valid, constraints = self.__xmlmcPushUri.validate()
            if not valid:
                exception = xmlexceptions.XMLInvalidSimpleObjectException('IhmLauncherConfig',
                                                                          'mcPushUri',
                                                                          'XMLString',
                                                                          self.__xmlmcPushUri.getValue(),
                                                                          constraints)
                if self.fileName is not None:
                    exception.setFileAndLine(self.fileName, self.__xmlmcPushUri.lineInFile)
                error.append(exception)
                

        if self.__xmlmcPullUri is None:
            exception = xmlexceptions.XMLRequiredObject('IhmLauncherConfig', 'mcPullUri')
            if self.fileName is not None:
                exception.setFileAndLine(self.fileName, self.lineInFile)
            error.append(exception)
        if self.__xmlmcPullUri is not None:
            valid, constraints = self.__xmlmcPullUri.validate()
            if not valid:
                exception = xmlexceptions.XMLInvalidSimpleObjectException('IhmLauncherConfig',
                                                                          'mcPullUri',
                                                                          'XMLString',
                                                                          self.__xmlmcPullUri.getValue(),
                                                                          constraints)
                if self.fileName is not None:
                    exception.setFileAndLine(self.fileName, self.__xmlmcPullUri.lineInFile)
                error.append(exception)
                

        if self.__xmlfeaturesConfFile is None:
            exception = xmlexceptions.XMLRequiredObject('IhmLauncherConfig', 'featuresConfFile')
            if self.fileName is not None:
                exception.setFileAndLine(self.fileName, self.lineInFile)
            error.append(exception)
        if self.__xmlfeaturesConfFile is not None:
            valid, constraints = self.__xmlfeaturesConfFile.validate()
            if not valid:
                exception = xmlexceptions.XMLInvalidSimpleObjectException('IhmLauncherConfig',
                                                                          'featuresConfFile',
                                                                          'XMLString',
                                                                          self.__xmlfeaturesConfFile.getValue(),
                                                                          constraints)
                if self.fileName is not None:
                    exception.setFileAndLine(self.fileName, self.__xmlfeaturesConfFile.lineInFile)
                error.append(exception)
                

        if self.__xmladditionalArg is not None:
            if len(self.__xmladditionalArg) < 0  :
                exception = xmlexceptions.XMLInvalidList('IhmLauncherConfig',
                                                         'additionalArg',
                                                         len(self.__xmladditionalArg),
                                                         0,
                                                         -1)
                if self.fileName is not None:
                    exception.setFileAndLine(self.fileName, self.lineInFile)
                error.append(exception)
                
            for obj in self.__xmladditionalArg:
                valid, constraints = obj.validate()
                if not valid:
                    exception = xmlexceptions.XMLInvalidSimpleObjectException('IhmLauncherConfig', 
                                                                              'additionalArg', 
                                                                              'XMLString',
                                                                              self.__xmladditionalArg.getValue(),
                                                                              constraints)
                    if self.fileName is not None:
                        exception.setFileAndLine(self.fileName, obj.lineInFile)
                    error.append(exception)

        return error
