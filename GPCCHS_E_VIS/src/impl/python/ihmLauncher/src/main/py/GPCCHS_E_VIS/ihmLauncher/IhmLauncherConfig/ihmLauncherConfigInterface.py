# Produced by Velocity Python Generator 1.1.2-R8

# -*- coding: utf-8 -*-

"""!
Project   : ISIS
Component : GPCC
@file     : ihmLauncherConfigInterface.py
@author   : isis
@date     : 
@brief    :
@type     : Class

"""

# ====================================================================
# Start of user code HistoryZone
# HISTORY
# 
# END-HISTORY
# End of user code HistoryZone
# ====================================================================

"""
**********************************************************************
 Module IhmLauncherConfigInterface
**********************************************************************

Contain class IhmLauncherConfigInterface
"""

from GPCC.xmlRuntime.core.xmlinterface import XMLInterface
import GPCC.xmlRuntime.exceptions.xmlexceptions as xmlexceptions 

from GPCCHS_E_VIS.ihmLauncher.IhmLauncherConfig.ihmLauncherConfig import IhmLauncherConfig


class IhmLauncherConfigInterface(XMLInterface): #False alarm pylint: disable=interface-not-implemented
    """
    ======================================================================
    Class IhmLauncherConfigInterface
    ======================================================================

    Class generated by xmlGenerator

    .. sealso : XMLInterface
    """


    def __init__(self):
        """
        Constructor for IhmLauncherConfigInterface
        """
        super().__init__(**{"IhmLauncherConfig":
                            (self.create_xmlIhmLauncherConfig, 
                             self.set_xmlIhmLauncherConfig,
                             self.setFileLine_xmlIhmLauncherConfig )})

        self.__xmlIhmLauncherConfig = None
        self.__shouldWriteTag = True


    @property
    def xmlIhmLauncherConfig(self):
        """
        Getter
        @return __xmlIhmLauncherConfig
        """
        # Start of user code getxmlIhmLauncherConfig
        return self.__xmlIhmLauncherConfig
        # End of user code
    
    @xmlIhmLauncherConfig.setter
    def xmlIhmLauncherConfig(self, value):
        """
        Setter
        @param value The value to set __xmlIhmLauncherConfig with
        """
        # Start of user code setxmlIhmLauncherConfig
        self.__xmlIhmLauncherConfig = value
        # End of user code
    
    @xmlIhmLauncherConfig.deleter
    def xmlIhmLauncherConfig(self):
        """
        Deleter
        delete __xmlIhmLauncherConfig
        """
        # Start of user code delxmlIhmLauncherConfig
        del self.__xmlIhmLauncherConfig
        # End of user code

    @property
    def shouldWriteTag(self):
        """
        Getter
        @return __shouldWriteTag
        """
        # Start of user code getshouldWriteTag
        return self.__shouldWriteTag
        # End of user code
    
    @shouldWriteTag.setter
    def shouldWriteTag(self, value):
        """
        Setter
        @param value The value to set __shouldWriteTag with
        """
        # Start of user code setshouldWriteTag
        self.__shouldWriteTag = value
        # End of user code
    
    @shouldWriteTag.deleter
    def shouldWriteTag(self):
        """
        Deleter
        delete __shouldWriteTag
        """
        # Start of user code delshouldWriteTag
        del self.__shouldWriteTag
        # End of user code




    def create_xmlIhmLauncherConfig(self):
        """
        Lambda for variable creation

        @return a GPCCHS_E_VIS.ihmLauncher.IhmLauncherConfig.IhmLauncherConfig
        @see GPCC.xmlRuntime.core.xmlobject
        """

        self.__xmlIhmLauncherConfig = IhmLauncherConfig()
        self.__xmlIhmLauncherConfig.tag_name = "IhmLauncherConfig"
        return self.__xmlIhmLauncherConfig

    def set_xmlIhmLauncherConfig(self, value):
        """
        Set the variable
        @param value the value to store.
        """
        self.__xmlIhmLauncherConfig =  value
    def setFileLine_xmlIhmLauncherConfig(self, fileName, line):
        """
        Set the file name and line
        @param fileName The file name.
        @param line The line.
        """
        self.__xmlIhmLauncherConfig.fileName = fileName
        self.__xmlIhmLauncherConfig.lineInFile = line



    def write(self,fileName):
        """
        Method write
        ------------------------------------------------------------

        Write the xml file

        @param fileName str. The file name
        """
        f = open(fileName,'w')
        self.writeHeader(f)
        self.writeNewLine(f)
        self.__xmlIhmLauncherConfig.writeXml(f,0)
        f.close()


    def validate(self):# CBN DV6 TBC_CNES Number of branch depends on the xsd pylint: disable=too-many-branches
        """
        Validate this instance
        @return A list containing all the errors found
        """
        error = []

        if self.__xmlIhmLauncherConfig is None:
            exception = xmlexceptions.XMLRequiredObject('IhmLauncherConfigInterface', 'IhmLauncherConfig')
            if self.fileName is not None:
                exception.setFileAndLine(self.fileName, self.lineInFile)
            error.append(exception)
        if self.__xmlIhmLauncherConfig is not None:
            error.extend(self.__xmlIhmLauncherConfig.validate())

        return error
