#!/usr/bin/env node

require('dotenv-safe').load();

const exit = require('exit');
const async = require('async');
const debug = require('../lib/io/debug')('launcher');
const app = require('../app');
const http = require('http');
const { bindPushSockets } = require('../lib/io/zmq');
const { bindWebSockets } = require('../lib/io/socket.io');
const cacheMgr = require('../lib/dataCache');
const { jsonDataColl } = require('../lib/io/loki');
const { injectParameters } = require('../stub/paramInjector');

// port
function normalizePort(val) {
  const p = parseInt(val, 10);

  if (isNaN(p)) {
    // named pipe
    return val;
  }

  if (p >= 0) {
    // port number
    return p;
  }

  return false;
}
const port = normalizePort(process.env.PORT);
app.set('port', port);

// HTTP server
const server = http.createServer(app);
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    `Pipe ${port}` :
    `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      debug.error(`${bind} requires elevated privileges`);
      exit(1);
      break;
    case 'EADDRINUSE':
      debug.error(`${bind} is already in use`);
      exit(1);
      break;
    default:
      throw error;
  }
}
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
  debug.info(`Server launched on port ${bind}`);
}
server.on('error', onError);
server.on('listening', onListening);

// open communication bus with external and run HTTP server
debug.info(`Trying to launch server in '${process.env.NODE_ENV}' env`);
async.waterfall([
  callback => bindWebSockets(server, callback),
  callback => bindPushSockets(callback),
  callback => {
    cacheMgr.init();
    injectParameters(jsonDataColl, process.env.PARAM_NB || 0, process.env.TIMESTAMP_START);
    callback();
  },
  callback => {
    server.listen(port);
    callback();
  },
], err => {
  if (err) {
    debug.error(err);
    exit(1);
  }
});
